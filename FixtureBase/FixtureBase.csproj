<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net45</TargetFrameworks>
    <AssemblyVersion>0.3.1</AssemblyVersion>
    <AssemblyFileVersion>0.3.1</AssemblyFileVersion>
    <PackageVersion>0.3.1</PackageVersion>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <Title><![CDATA[FixtureBase cuts the cost of unit testing. Intelligent, rule-driven, autofaking fixtures get you straight to your test with all 
your dependencies setup and ready to go.]]></Title>
    <PackageDescription><![CDATA[Don't spend hours writing code to mock a dozen dependencies, and more hours debugging it. Just write your test code, and let FixtureBase create the dependencies for you.

FixtureBase constructs your UnitUnderTest to test your codebase end-to-end, with external dependencies auto-faked and automatically injected in just the right place; even constructor dependencies that are several layers deep. 

You just write your tests:
```
public class FixtureBaseExample : FixtureBaseWithDbAndHttpFor<AUseCase>
{
    [Fact]
    public void UUTSendsDataToDb()
    {
        var newDatum = new Datum{Id=99, Name="New!" };

        UnitUnderTest.InsertDb(newDatum);

        Db.ShouldHaveInserted("Data",newDatum);
    }

    [Fact]
    public void UUTreturnsDataFromDbQuerySingleColumn()
    {
        var dbData = new[] { "row1", "row2", "row3", "row4"};
        Db.SetUpForQuerySingleColumn(dbData);

        UnitUnderTest.FromDbStrings().ShouldEqualByValue(dbData);
    }

    [Fact]
    public async Task UUTGetHttpReturnsDataFromService()
    {
        var contentFromService = "IGotThis!";
        HttpClient
            .Setup(m => true)
            .Returns(new HttpResponseMessage(HttpStatusCode.OK) {Content = new StringContent(contentFromService)});

        (await UnitUnderTest.GetHttp()).ShouldBe(contentFromService);

        HttpClient.Verify(x=>x.Method==HttpMethod.Get);
    }
}
```
 
The included examples demonstrate FixtureBases for applications which depend on Ado.Net IDbConnections and on HttpClient network connections.
-   To create your own FixtureBase with your own preferred Fakes, see the
    examples at
    <https://github.com/chrisfcarroll/ActivateAnything/blob/master/FixtureBase/FixtureExample.cs.md>
-   For how it's done, see
    <https://github.com/chrisfcarroll/ActivateAnything/blob/master/FixtureBase/FixtureBase.cs>

Construction is done by
-   [ActivateAnything](https://www.nuget.org/packages/ActivateAnything)
 
Faking is done by
-   [TestBase.AdoNet](https://www.nuget.org/packages/TestBase.AdoNet)
-   [TestBase.HttpClient.Fake](https://www.nuget.org/packages/TestBase.HttpClient.Fake)

For more tools focussed on cutting the cost of unit testing, see also:
-   [TestBase](https://www.nuget.org/packages/TestBase)
-   [TestBase.AspNetCore.Mvc](https://www.nuget.org/packages/TestBase.AspNetCore.Mvc)
-   [TestBase-Mvc](https://www.nuget.org/packages/TestBase-Mvc)
-   [TestBase.AdoNet](https://www.nuget.org/packages/TestBase.AdoNet)
-   [TestBase.HttpClient.Fake](https://www.nuget.org/packages/TestBase.HttpClient.Fake)
-   [Serilog.Sinks.ListOfString](https://www.nuget.org/packages/Serilog.Sinks.Listofstring)
-   [Extensions.Logging.ListOfString](https://www.nuget.org/packages/Extensions.Logging.ListOfString)]]></PackageDescription>
    <PackageReleaseNotes>ChangeLog
      ---------
      0.3.1 ActivateAnything added rules ActivateUsingInstance and ChooseType for declaring instances to use
      0.3.0 AnythingActivator.Instances as well as Rules. Breaking: refactored constructors &amp; FixtureBase startup
      0.2.2 FixtureBase
      0.2.1 ActivateInstance Rule can activate a Func&lt;Type&gt; as well as a Type
      0.2.0 ActivateAnything exposes LastActivationTree and LastErrorList after a call to New()
      0.1.0.2 fix non-public constructors. ChooseConstructorWith(Most|Fewest)ParametersAttribute.PreferPublic defaults to true.
      0.1.0.1 ActivateAnything first release.
    </PackageReleaseNotes>
    <Copyright>(c) Chris F. Carroll, 2018,2021</Copyright>
    <Authors>https://github.com/chrisfcarroll</Authors>
    <Owners>Chris F Carroll</Owners>
    <PackageProjectUrl>https://github.com/chrisfcarroll/ActivateAnything</PackageProjectUrl>
    <RepositoryUrl>https://github.com/chrisfcarroll/ActivateAnything</RepositoryUrl>
    <PackageLicenseExpression>GPL-3.0-only</PackageLicenseExpression>
    <RequireLicenseAcceptance>false</RequireLicenseAcceptance>
    <IncludeSymbols>true</IncludeSymbols>
    <PackageTags>activate;create;test;unittest;tdd;mock;fake;testbase;fixture;autofixture;automock;autofake</PackageTags>
  </PropertyGroup>
  
  <PropertyGroup>
    <!-- When compiling .NET SDK 2.0 projects targeting .NET 4.x on Mono using 'dotnet build' you -->
    <!-- have to teach MSBuild where the Mono copy of the reference asssemblies is -->
    <TargetIsMono Condition="$(TargetFramework.StartsWith('net4')) and '$(OS)' == 'Unix'">true</TargetIsMono>
    <!-- Look in the standard install locations -->
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/Library/Frameworks/Mono.framework/Versions/Current/lib/mono')">/Library/Frameworks/Mono.framework/Versions/Current/lib/mono</BaseFrameworkPathOverrideForMono>
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/usr/lib/mono')">/usr/lib/mono</BaseFrameworkPathOverrideForMono>
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/usr/local/lib/mono')">/usr/local/lib/mono</BaseFrameworkPathOverrideForMono>

    <!-- If we found Mono reference assemblies, then use them -->
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net40'">$(BaseFrameworkPathOverrideForMono)/4.0-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net45'">$(BaseFrameworkPathOverrideForMono)/4.5-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net451'">$(BaseFrameworkPathOverrideForMono)/4.5.1-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net452'">$(BaseFrameworkPathOverrideForMono)/4.5.2-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net46'">$(BaseFrameworkPathOverrideForMono)/4.6-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net461'">$(BaseFrameworkPathOverrideForMono)/4.6.1-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net462'">$(BaseFrameworkPathOverrideForMono)/4.6.2-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net47'">$(BaseFrameworkPathOverrideForMono)/4.7-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net471'">$(BaseFrameworkPathOverrideForMono)/4.7.1-api</FrameworkPathOverride>
    <EnableFrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">true</EnableFrameworkPathOverride>

    <!-- Add the Facades directory.  Not sure how else to do this. Necessary at least for .NET 4.5 -->
    <AssemblySearchPaths Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">$(FrameworkPathOverride)/Facades;$(AssemblySearchPaths)</AssemblySearchPaths>
  </PropertyGroup>
  
  <ItemGroup>
    <None Remove="FixtureExample.cs.md" />
    <None Remove="README.md" />
  </ItemGroup>
  
  <ItemGroup>
    <Content Include="FixtureExample.cs.md">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="README.md">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>


  <ItemGroup>
    <PackageReference Include="TestBase.AdoNet" Version="4.1.5" />
    <PackageReference Include="TestBase.HttpClient.Fake" Version="4.1.4.3" />
  </ItemGroup>


  <ItemGroup>
    <ProjectReference Include="..\ActivateAnything\ActivateAnything.csproj" />
  </ItemGroup>

</Project>
