<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net45</TargetFrameworks>
    <AssemblyVersion>0.1.0.2</AssemblyVersion>
    <AssemblyFileVersion>0.1.0.2</AssemblyFileVersion>
    <PackageVersion>0.1.0.2</PackageVersion>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <Title><![CDATA[ActivateAnything — abstract types, concrete types, constructor dependencies — ActivateAnything 
    just resolves it all and gives you a result.]]></Title>
    <PackageDescription><![CDATA[An `AnythingActivator` will make an extreme effort to find and instantiate a concrete class
which is assignable to a `Type`, whether or not the Type is concrete, whether or not the 
Type has constructor dependencies, whether or not a suitable concrete subtype is found 
in any currently loaded `Assembly`.

The attempt to find and instantiate suitable Types is rule-driven. 

There are three kinds of `IActivateAnythingRule`.
- `IFindTypeRule` provides rules for where to look for candidate concrete subtypes of an abstract type
- `IActivateInstanceRule` simply returns an instance of a concrete type.
- `IChooseConstructorRule` rules for how to choose between constructors when a concrete `Type` has been chosen.

The <em>extremity</em> of the effort lies in its recursive attempt to find and construct the <em>dependencies</em>.
]]></PackageDescription>
    <PackageReleaseNotes>ChangeLog
      ---------
      0.1.0.2 fix non-public constructors. ChooseConstructorWith(Most|Fewest)ParametersAttribute.PreferPublic defaults to true.
      0.1.0.1 ActivateAnything first release.
    </PackageReleaseNotes>
    <Copyright>(c) Chris F. Carroll, 2018</Copyright>
    <Authors>Chris F Carroll</Authors>
    <Owners>Chris F Carroll</Owners>
    <PackageProjectUrl>https://github.com/chrisfcarroll/ActivateAnything</PackageProjectUrl>
    <RepositoryUrl>https://github.com/chrisfcarroll/ActivateAnything</RepositoryUrl>
    <RequireLicenseAcceptance>false</RequireLicenseAcceptance>
    <IncludeSymbols>true</IncludeSymbols>
    <PackageTags>activate;create;test;unittest;tdd;mock;fake</PackageTags>
  </PropertyGroup>

  <PropertyGroup>
    <!-- When compiling .NET SDK 2.0 projects targeting .NET 4.x on Mono using 'dotnet build' you -->
    <!-- have to teach MSBuild where the Mono copy of the reference asssemblies is -->
    <TargetIsMono Condition="$(TargetFramework.StartsWith('net4')) and '$(OS)' == 'Unix'">true</TargetIsMono>
    <!-- Look in the standard install locations -->
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/Library/Frameworks/Mono.framework/Versions/Current/lib/mono')">/Library/Frameworks/Mono.framework/Versions/Current/lib/mono</BaseFrameworkPathOverrideForMono>
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/usr/lib/mono')">/usr/lib/mono</BaseFrameworkPathOverrideForMono>
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/usr/local/lib/mono')">/usr/local/lib/mono</BaseFrameworkPathOverrideForMono>

    <!-- If we found Mono reference assemblies, then use them -->
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net45'">$(BaseFrameworkPathOverrideForMono)/4.5-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net451'">$(BaseFrameworkPathOverrideForMono)/4.5.1-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net452'">$(BaseFrameworkPathOverrideForMono)/4.5.2-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net46'">$(BaseFrameworkPathOverrideForMono)/4.6-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net461'">$(BaseFrameworkPathOverrideForMono)/4.6.1-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net462'">$(BaseFrameworkPathOverrideForMono)/4.6.2-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net47'">$(BaseFrameworkPathOverrideForMono)/4.7-api</FrameworkPathOverride>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net471'">$(BaseFrameworkPathOverrideForMono)/4.7.1-api</FrameworkPathOverride>
    <EnableFrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">true</EnableFrameworkPathOverride>

    <!-- Add the Facades directory.  Not sure how else to do this. Necessary at least for .NET 4.5 -->
    <AssemblySearchPaths Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">$(FrameworkPathOverride)/Facades;$(AssemblySearchPaths)</AssemblySearchPaths>
  </PropertyGroup>
  
</Project>